import { KeyboardArrowDown, KeyboardArrowUp } from "@mui/icons-material";
import {
  Box,
  Collapse,
  Grid,
  IconButton,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
  TableSortLabel,
  Typography,
} from "@mui/material";
import { useEffect, useState } from "react";
//funcion del ordenamiento de registro
function descendingComparator(a, b, orderBy) {
  if (b[orderBy] < a[orderBy]) {
    return -1;
  }
  if (b[orderBy] > a[orderBy]) {
    return 1;
  }
  return 0;
}
//funcion del ordenamiento de registro
function getComparator(order, orderBy) {
  // console.log(orderBy);
  return order === "desc"
    ? //estas funciones son las que se ejecutas en applySortFilter
      (a, b) => descendingComparator(a, b, orderBy)
    : (a, b) => -descendingComparator(a, b, orderBy);
}

//aplicar ordenamiento por filtro
function applySortFilter(array, comparator, query, columnaABuscar) {
  const stabilizedThis = array.map((el, index) => [el, index]);

  //ordeamiento de los datos
  stabilizedThis.sort((a, b) => {
    const order = comparator(a[0], b[0]);

    if (order !== 0) return order;
    return a[1] - b[1];
  });

  //  cuadro de busqueda recibe texto usamos funcion del lodash

  if (query) {
    const datosBuscados = filter(array, (_user) => {
      const txt_celda = _user[columnaABuscar];
      console.log(txt_celda);
      //si txt_celda existe
      if (txt_celda) {
        //si el tipo de celda es un numero
        if (typeof txt_celda === "number") {
          //lo ingresado el box search es un numero
          if (!isNaN(parseInt(query))) {
            //se muestra resultados mayores o iguales a ese numero
            return txt_celda >= query;
          }
        } else {
          //es texto

          return txt_celda.toLowerCase().indexOf(query.toLowerCase()) !== -1;
        }
      }
    });

    //filtrar datos del resultado de la busqueda
    const datosBuscadosOrd = datosBuscados.map((el, index) => [el, index]);

    datosBuscadosOrd.sort((a, b) => {
      const order = comparator(a[0], b[0]);
      if (order !== 0) return order;
      return a[1] - b[1];
    });

    return datosBuscadosOrd.map((el) => el[0]);
  }

  //retornar resultados ordenados
  return stabilizedThis.map((el) => el[0]);
}

function createData(name, calories, fat, carbs, protein, price) {
  return {
    name,
    calories,
    fat,
    carbs,
    protein,
    price,
    history: [
      {
        date: "2020-01-05",
        customerId: "11091700",
        amount: 3,
      },
      {
        date: "2020-01-02",
        customerId: "Anonymous",
        amount: 1,
      },
    ],
  };
}

function Row({ row }) {
  const [open, setOpen] = useState(false);

  return (
    <>
      <TableRow sx={{ "& > *": { borderBottom: "unset" } }}>
        <TableCell>
          <IconButton
            // size="small"

            onClick={() => setOpen(!open)}
          >
            {open ? (
              <KeyboardArrowUp sx={{ color: "primary.main" }} />
            ) : (
              <KeyboardArrowDown sx={{ color: "primary.main" }} />
            )}
          </IconButton>
        </TableCell>
        <TableCell
        //  component="th" scope="row"
        >
          {row.name}
        </TableCell>
        <TableCell align="right">{row.calories}</TableCell>
        <TableCell align="right">{row.fat}</TableCell>
        <TableCell align="right">{row.carbs}</TableCell>
        <TableCell align="right">{row.protein}</TableCell>
      </TableRow>

      {/* fila con collapse */}
      <TableRow>
        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
          <Collapse in={open} timeout="auto" unmountOnExit>
            <Box sx={{ margin: 1 }}>
              <Typography variant="h6" gutterBottom component="div">
                History
              </Typography>
              <Table size="small" aria-label="purchases">
                <TableHead>
                  <TableRow>
                    <TableCell>Date</TableCell>
                    <TableCell>Customer</TableCell>
                    <TableCell align="right">Amount</TableCell>
                    <TableCell align="right">Total price ($)</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {row.history.map((historyRow) => (
                    <TableRow key={historyRow.date}>
                      <TableCell component="th" scope="row">
                        {historyRow.date}
                      </TableCell>
                      <TableCell>{historyRow.customerId}</TableCell>
                      <TableCell align="right">{historyRow.amount}</TableCell>
                      <TableCell align="right">
                        {Math.round(historyRow.amount * row.price * 100) / 100}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          </Collapse>
        </TableCell>
      </TableRow>
    </>
  );
}

const DATALIST = [
  createData("Frozen yoghurt", 159, 6.0, 24, 4.0, 3.99),
  createData("Ice cream sandwich", 237, 9.0, 37, 4.3, 4.99),
  createData("Eclair", 262, 16.0, 24, 6.0, 3.79),
  createData("Cupcake", 305, 3.7, 67, 4.3, 2.5),
  createData("Gingerbread", 356, 16.0, 49, 3.9, 1.5),
  createData("Gingerbread v2", 400, 16.0, 49, 3.9, 1.5),
  createData("Gingerbread v3", 460, 16.0, 49, 3.9, 1.5),
];

export const CollapsibleTable = () => {
  const TABLE_HEAD = [
    { id: "flecha", label: "" },
    { id: "name", label: "Dessert (100g serving)" },
    { id: "calories", label: "Calories" },
    { id: "fat", label: "Fat (g)" },
    { id: "carbs", label: "Carbs (g)" },
    { id: "protein", label: "Protein (g)" },
    // { id: "price", label: "Price" },
  ];
  //hook numero de pagina a mostrar
  const [page, setPage] = useState(0);

  //hook  orden de la columna asc or desc
  const [order, setOrder] = useState("desc");

  //hook captura de  la columna seleccionada debe ser una columna con un dato unico
  const [orderBy, setOrderBy] = useState("name");

  //hooks datos totales
  const [dataTotal, setDataTotal] = useState(DATALIST.length);

  //hook filas por paginas
  const [rowsPerPage, setRowsPerPage] = useState(5);

  //hook text del cuadro de busqueda
  const [filterName, setFilterName] = useState("");

  //
  //handlers
  //

  //handler cambiar el orden
  const handleRequestSort = (event, property) => {
    const isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
    setPage(0);
  };
  //registros filtrados
  const filteredUsers = applySortFilter(
    DATALIST,
    getComparator(order, orderBy),
    filterName,
    orderBy
  );

  //handler para actualizar el hook page
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  //handler del Filtro por Nombre
  const handleFilterByName = (event) => {
    //setea la pagina a 0
    setPage(0);
    //actualiza el hook con el texto del cuadro de busqueda
    setFilterName(event.target.value);
  };

  //handler para actualizar el hook page y el hook rowsPerPage
  const handleChangeRowsPerPage = (event) => {
    //console.log(event.target.value);
    setPage(0);

    setRowsPerPage(parseInt(event.target.value, 10));
  };

  //filas vacias
  const emptyRows =
    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - DATALIST.length) : 0;

  //useEffect para actualizar los registros totales
  useEffect(() => {
    setDataTotal(filteredUsers.length);
  }, [filteredUsers]);

  return (
    <Box
      sx={{
        bgcolor: "white",
        width: "100%",
      }}
    >
      <TableContainer sx={{ overflowX: "initial", backgroundColor: "white" }}>
        <Table aria-label="collapsible table">
          {/* <TableHead>
          <TableRow>
            <TableCell />
            <TableCell>Dessert (100g serving)</TableCell>
            <TableCell align="right">Calories</TableCell>
            <TableCell align="right">Fat&nbsp;(g)</TableCell>
            <TableCell align="right">Carbs&nbsp;(g)</TableCell>
            <TableCell align="right">Protein&nbsp;(g)</TableCell>
          </TableRow>
        </TableHead> */}
          <DataListHeadCT
            order={order}
            orderBy={orderBy}
            headLabel={TABLE_HEAD}
            onRequestSort={handleRequestSort}
          />
          <TableBody>
            {filteredUsers
              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map((row) => (
                <Row key={row.name} row={row} />
              ))}

            {emptyRows > 0 && (
              <TableRow style={{ height: 53 * emptyRows }}>
                <TableCell colSpan={6} />
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        sx={{
          //   backgroundColor: "white",
          fontWeight: "bold",
        }}
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={dataTotal}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Box>
  );
};

export const DataListHeadCT = ({
  order,
  orderBy,
  headLabel,
  onRequestSort,
}) => {
  // funcion que retorna funcion
  const createSortHandler = (property) => (event) => {
    onRequestSort(event, property);
  };

  return (
    <TableHead>
      <TableRow>
        {/** headers */}

        {headLabel.map((headCell) => (
          <TableCell
            key={headCell.id}
            sortDirection={orderBy === headCell.id ? order : false}
            sx={{
              padding: "0",
              margin: "0",
              bgcolor: "colorTable.main",
              color: "primary.light",
              borderLeft: "3px solid white",
              borderRight: "3px solid white",
            }}
          >
            <Grid
              display="grid"
              padding="5px"
              container
              flexDirection="column"
              justifyItems="start"
            >
              <Grid item sx={{ width: "80%" }}>
                <TableSortLabel
                  hideSortIcon
                  active={orderBy === headCell.id}
                  direction={orderBy === headCell.id ? order : "asc"}
                  onClick={createSortHandler(headCell.id)}
                  sx={{
                    fontWeight: "bold",
                  }}
                >
                  {headCell.label}
                </TableSortLabel>
              </Grid>
              <Grid item sx={{ width: "20%" }}>
                <span
                  style={{
                    textTransform: "uppercase",
                    fontSize: "10px",
                    color: "black",
                  }}
                >
                  {orderBy === headCell.id ? (
                    order
                  ) : (
                    <span style={{ visibility: "hidden" }}>""</span>
                  )}
                </span>
              </Grid>
            </Grid>
          </TableCell>
        ))}

        {/* <TableCell
          align="right"
          sx={{
            height: "10px",
            bgcolor: "colorTable.main",
            borderLeft: "3px solid white",
          }}
        ></TableCell> */}
      </TableRow>
    </TableHead>
  );
};
